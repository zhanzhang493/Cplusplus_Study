#include <iostream>
#include <string>
using namespace std;

/* 对象的初始化和清理 */
// 一个对象或者变量没有初始状态，对其使用后果是未知的
// 同样，使用完一个对象或变量，没有及时清理，也会造成一定的安全问题
// C++利用构造函数和析构函数解决上述问题，这两个函数被编译器自动调用，完成对象初始化和清理工作
// 初始化和清理是编译器强制要求我们做的事情，若不提供构造和析构函数，编译器会提供
// 编译器提供的构造和析构函数是空实现

/* 构造函数 和 析构函数 */
// 构造函数：主要作用在于创建对象时，为对象的成员属性赋值，构造函数由编译器自动调用
// 析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作

/* 构造函数 */
// 语法： 类名(){}
// 构造函数没有返回值，也不写void
// 函数名为类名
// 可以有参数，因此也可以发生重载
// 程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次
// 构造函数可以是公有的，私有的，保护的

/* 析构函数 */
// 语法： ~类名(){}
// 析构函数没有返回值，也不写void
// 函数名为类名，并在名称前加上符号~
// 不可以有参数，因此不可以发生重载
// 程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次
// 析构函数必须是公有的，因为对象生命周期结束后，系统会调用，如果不是公有的则会引发错误

class Person
{
private:
    /* data */
public:
    Person(/* args */);
    ~Person();
};

Person::Person(/* args */)
{
    cout << "构造函数调用." << endl;
}

Person::~Person()
{
    cout << "析构函数调用." << endl;
}

void test01()
{
    Person p;   // 栈上的数据，test01()结束后会调用析构
}

int main()
{   
    Person p1; // 栈上的数据，main()结束后会调用析构
    test01();
    return 0;
}